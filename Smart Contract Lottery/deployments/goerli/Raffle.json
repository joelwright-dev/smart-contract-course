{
  "address": "0xe462712259F9273eb904b4eC473f7439863eB7df",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa66136b36c2ecce522a8eb67b350ecb64dce611b6dd4b93db2abdbdcfe77e185",
  "receipt": {
    "to": null,
    "from": "0x1e552547c01644b525B591f632D8d8119dBc68f2",
    "contractAddress": "0xe462712259F9273eb904b4eC473f7439863eB7df",
    "transactionIndex": 34,
    "gasUsed": "1289282",
    "logsBloom": "0x
    "blockHash": "0x1e5f2687f7e15237fae0180a2d9b3d85e3f2097221e29f5d71d91f5aed55f07a",
    "transactionHash": "0xa66136b36c2ecce522a8eb67b350ecb64dce611b6dd4b93db2abdbdcfe77e185",
    "logs": [],
    "blockNumber": 8064852,
    "cumulativeGasUsed": "12184136",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "50000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "7189",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "d08170b2f38d59d7311b9a19f9fe7f3a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Joel Wright\",\"details\":\"This implements Chainlink VRF v2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call, they look for `upkeepNeeded` to return true. The following should be true in order to return true: 1. The time interval should have passed 2. The lottery should have at least 2 players, and some ETH 3. The subscription is funded with LINK 4. The lottery should be in an \\\"open\\\" state\"}},\"title\":\"An Ethereum Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating an untamperable decentralised raffle through a smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(\\n\\tuint256 currentBalance,\\n\\tuint256 numPlayers,\\n\\tuint256 raffleState\\n);\\n\\n/** @title An Ethereum Raffle Contract\\n * @author Joel Wright\\n * @notice This contract is for creating an untamperable decentralised raffle through a smart contract\\n * @dev This implements Chainlink VRF v2 and Chainlink Keepers\\n */\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n\\t/* Type Declarations */\\n\\tenum RaffleState {\\n\\t\\tOPEN,\\n\\t\\tCALCULATING\\n\\t}\\n\\n\\t/* State Variables */\\n\\tuint256 private immutable i_entranceFee;\\n\\taddress payable[] private s_players;\\n\\tVRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n\\tbytes32 private immutable i_gasLane;\\n\\tuint64 private immutable i_subscriptionId;\\n\\tuint32 private immutable i_callbackGasLimit;\\n\\tuint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\tuint32 private constant NUM_WORDS = 1;\\n\\taddress private s_recentWinner;\\n\\tRaffleState private s_raffleState;\\n\\tuint256 private s_lastTimeStamp;\\n\\tuint256 private immutable i_interval;\\n\\taddress private immutable i_owner;\\n\\n\\t/* Events */\\n\\tevent RaffleEnter(address indexed player);\\n\\tevent RequestedRaffleWinner(uint256 indexed requestId);\\n\\tevent WinnerPicked(address indexed winner);\\n\\n\\tconstructor(\\n\\t\\taddress vrfCoordinatorV2,\\n\\t\\tuint256 entranceFee,\\n\\t\\tbytes32 gasLane,\\n\\t\\tuint64 subscriptionId,\\n\\t\\tuint32 callbackGasLimit,\\n\\t\\tuint256 interval\\n\\t) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n\\t\\ti_entranceFee = entranceFee;\\n\\t\\ti_gasLane = gasLane;\\n\\t\\ti_subscriptionId = subscriptionId;\\n\\t\\ti_callbackGasLimit = callbackGasLimit;\\n\\t\\ti_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n\\t\\ts_raffleState = RaffleState.OPEN;\\n\\t\\ts_lastTimeStamp = block.timestamp;\\n\\t\\ti_interval = interval;\\n\\t\\ti_owner = msg.sender;\\n\\t}\\n\\n\\t/* Functions */\\n\\tfunction enterRaffle() public payable {\\n\\t\\tif (msg.value < i_entranceFee) {\\n\\t\\t\\trevert Raffle__NotEnoughETHEntered();\\n\\t\\t}\\n\\n\\t\\tif (s_raffleState != RaffleState.OPEN) {\\n\\t\\t\\trevert Raffle__NotOpen();\\n\\t\\t}\\n\\n\\t\\ts_players.push(payable(msg.sender));\\n\\t\\temit RaffleEnter(msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev This is the function that the Chainlink Keeper nodes call,\\n\\t * they look for `upkeepNeeded` to return true.\\n\\t * The following should be true in order to return true:\\n\\t * 1. The time interval should have passed\\n\\t * 2. The lottery should have at least 2 players, and some ETH\\n\\t * 3. The subscription is funded with LINK\\n\\t * 4. The lottery should be in an \\\"open\\\" state\\n\\t */\\n\\tfunction checkUpkeep(\\n\\t\\tbytes memory /* checkData */\\n\\t)\\n\\t\\tpublic\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tbool upkeepNeeded,\\n\\t\\t\\tbytes memory /* performData */\\n\\t\\t)\\n\\t{\\n\\t\\tbool isOpen = (RaffleState.OPEN == s_raffleState);\\n\\t\\tbool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n\\t\\tbool hasPlayers = (s_players.length > 1);\\n\\t\\tbool hasBalance = address(this).balance > 0;\\n\\t\\tupkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n\\t}\\n\\n\\tfunction performUpkeep(\\n\\t\\tbytes calldata /* performData */\\n\\t) external override {\\n\\t\\t(bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\t\\tif (!upkeepNeeded) {\\n\\t\\t\\trevert Raffle__UpkeepNotNeeded(\\n\\t\\t\\t\\taddress(this).balance,\\n\\t\\t\\t\\ts_players.length,\\n\\t\\t\\t\\tuint256(s_raffleState)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\ts_raffleState = RaffleState.CALCULATING;\\n\\t\\tuint256 requestId = i_vrfCoordinator.requestRandomWords(\\n\\t\\t\\ti_gasLane,\\n\\t\\t\\ti_subscriptionId,\\n\\t\\t\\tREQUEST_CONFIRMATIONS,\\n\\t\\t\\ti_callbackGasLimit,\\n\\t\\t\\tNUM_WORDS\\n\\t\\t);\\n\\t\\temit RequestedRaffleWinner(requestId);\\n\\t}\\n\\n\\tfunction fulfillRandomWords(\\n\\t\\tuint256, /*requestId*/\\n\\t\\tuint256[] memory randomWords\\n\\t) internal override {\\n\\t\\tuint256 indexOfWinner = randomWords[0] % s_players.length;\\n\\t\\taddress payable recentWinner = s_players[indexOfWinner];\\n\\t\\ts_recentWinner = recentWinner;\\n\\t\\ts_raffleState = RaffleState.OPEN;\\n\\t\\ts_players = new address payable[](0);\\n\\t\\ts_lastTimeStamp = block.timestamp;\\n\\t\\t(bool success, ) = recentWinner.call{\\n\\t\\t\\tvalue: (address(this).balance * 9) / 10\\n\\t\\t}(\\\"\\\");\\n\\t\\t(bool ownerSuccess, ) = i_owner.call{\\n\\t\\t\\tvalue: (address(this).balance * 1) / 10\\n\\t\\t}(\\\"\\\");\\n\\t\\tif (!success || !ownerSuccess) {\\n\\t\\t\\trevert Raffle__TransferFailed();\\n\\t\\t}\\n\\t\\temit WinnerPicked(recentWinner);\\n\\t}\\n\\n\\t/* View / Pure Functions */\\n\\tfunction getEntranceFee() public view returns (uint256) {\\n\\t\\treturn i_entranceFee;\\n\\t}\\n\\n\\tfunction getPlayer(uint256 index) public view returns (address) {\\n\\t\\treturn s_players[index];\\n\\t}\\n\\n\\tfunction getRecentWinner() public view returns (address) {\\n\\t\\treturn s_recentWinner;\\n\\t}\\n\\n\\tfunction getRaffleState() public view returns (RaffleState) {\\n\\t\\treturn s_raffleState;\\n\\t}\\n\\n\\tfunction getRandomWords() public pure returns (uint256) {\\n\\t\\treturn NUM_WORDS;\\n\\t}\\n\\n\\tfunction getNumberOfPlayers() public view returns (uint256) {\\n\\t\\treturn s_players.length;\\n\\t}\\n\\n\\tfunction getLatestTimeStamp() public view returns (uint256) {\\n\\t\\treturn s_lastTimeStamp;\\n\\t}\\n\\n\\tfunction getRequestConfirmations() public pure returns (uint256) {\\n\\t\\treturn REQUEST_CONFIRMATIONS;\\n\\t}\\n\\n\\tfunction getInterval() public view returns (uint256) {\\n\\t\\treturn i_interval;\\n\\t}\\n\\n\\tfunction getBalance() public view returns (uint256) {\\n\\t\\treturn address(this).balance;\\n\\t}\\n}\\n\",\"keccak256\":\"0x30ed93fe077a79ae3e5b351ca2227b8443c44e612335b49f553dde49219b88f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b50604051620019cc380380620019cc8339818101604052810190620000389190620002c9565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000365565b5b0217905550426002819055508061014081815250503373ffffffffffffffffffffffffffffffffffffffff166101608173ffffffffffffffffffffffffffffffffffffffff168152505050505050505062000394565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001958262000168565b9050919050565b620001a78162000188565b8114620001b357600080fd5b50565b600081519050620001c7816200019c565b92915050565b6000819050919050565b620001e281620001cd565b8114620001ee57600080fd5b50565b6000815190506200020281620001d7565b92915050565b6000819050919050565b6200021d8162000208565b81146200022957600080fd5b50565b6000815190506200023d8162000212565b92915050565b600067ffffffffffffffff82169050919050565b620002628162000243565b81146200026e57600080fd5b50565b600081519050620002828162000257565b92915050565b600063ffffffff82169050919050565b620002a38162000288565b8114620002af57600080fd5b50565b600081519050620002c38162000298565b92915050565b60008060008060008060c08789031215620002e957620002e862000163565b5b6000620002f989828a01620001b6565b96505060206200030c89828a01620001f1565b95505060406200031f89828a016200022c565b94505060606200033289828a0162000271565b93505060806200034589828a01620002b2565b92505060a06200035889828a01620001f1565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051610160516115bd6200040f6000396000610ae70152600081816108260152610895015260006106f3015260006106d0015260006106af01526000610673015260008181610340015261044501526000818161038501526103d901526115bd6000f3fe6080604052600436106100dd5760003560e01c8063473f1ddc1161007f57806391ad27b41161005957806391ad27b41461027e578063ce10b1fb146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b8063473f1ddc146101ea5780635f1b0fd8146102155780636e04ff0d14610240576100dd565b80631fe543e3116100bb5780631fe543e3146101635780632cfcc5391461018c578063320229eb146101965780634585e33b146101c1576100dd565b806309bc33a7146100e2578063115cbaf51461010d57806312065fe014610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610cd4565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610d66565b60405180910390f35b34801561014457600080fd5b5061014d61037b565b60405161015a9190610cd4565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610f1a565b610383565b005b610194610443565b005b3480156101a257600080fd5b506101ab6105b2565b6040516101b89190610cd4565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190610fd1565b6105bc565b005b3480156101f657600080fd5b506101ff6107ac565b60405161020c919061105f565b60405180910390f35b34801561022157600080fd5b5061022a6107d6565b6040516102379190610cd4565b60405180910390f35b34801561024c57600080fd5b506102676004803603810190610262919061112f565b6107e3565b604051610275929190611212565b60405180910390f35b34801561028a57600080fd5b50610293610891565b6040516102a09190610cd4565b60405180910390f35b3480156102b557600080fd5b506102be6108b9565b6040516102cb9190610cd4565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190611242565b6108c8565b604051610308919061105f565b60405180910390f35b34801561031d57600080fd5b5061032661090f565b6040516103339190610cd4565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b600047905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042c92919061126f565b60405180910390fd5b61043f828261091b565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561049d576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104b1576104b0610cef565b5b600160149054906101000a900460ff1660018111156104d3576104d2610cef565b5b1461050a576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105d6604051806020016040528060008152506107e3565b509050806106455747600080549050600160149054906101000a900460ff16600181111561060757610606610cef565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161063c93929190611298565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561066a57610669610cef565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610734959493929190611347565b6020604051808303816000875af1158015610753573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077791906113af565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff16600181111561080b5761080a610cef565b5b6000600181111561081f5761081e610cef565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610853919061140b565b11905060006001600080549050119050600080471190508380156108745750825b801561087d5750815b80156108865750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600163ffffffff16905090565b60008082815481106108dd576108dc61143f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109365761093561143f565b5b6020026020010151610948919061149d565b9050600080828154811061095f5761095e61143f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109f3576109f2610cef565b5b0217905550600067ffffffffffffffff811115610a1357610a12610dd7565b5b604051908082528060200260200182016040528015610a415781602001602082028036833780820191505090505b5060009080519060200190610a57929190610c14565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16600a600947610a8791906114ce565b610a919190611510565b604051610a9d90611572565b60006040518083038185875af1925050503d8060008114610ada576040519150601f19603f3d011682016040523d82523d6000602084013e610adf565b606091505b5050905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16600a600147610b2b91906114ce565b610b359190611510565b604051610b4190611572565b60006040518083038185875af1925050503d8060008114610b7e576040519150601f19603f3d011682016040523d82523d6000602084013e610b83565b606091505b50509050811580610b92575080155b15610bc9576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2505050505050565b828054828255906000526020600020908101928215610c8d579160200282015b82811115610c8c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c34565b5b509050610c9a9190610c9e565b5090565b5b80821115610cb7576000816000905550600101610c9f565b5090565b6000819050919050565b610cce81610cbb565b82525050565b6000602082019050610ce96000830184610cc5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d2f57610d2e610cef565b5b50565b6000819050610d4082610d1e565b919050565b6000610d5082610d32565b9050919050565b610d6081610d45565b82525050565b6000602082019050610d7b6000830184610d57565b92915050565b6000604051905090565b600080fd5b600080fd5b610d9e81610cbb565b8114610da957600080fd5b50565b600081359050610dbb81610d95565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e0f82610dc6565b810181811067ffffffffffffffff82111715610e2e57610e2d610dd7565b5b80604052505050565b6000610e41610d81565b9050610e4d8282610e06565b919050565b600067ffffffffffffffff821115610e6d57610e6c610dd7565b5b602082029050602081019050919050565b600080fd5b6000610e96610e9184610e52565b610e37565b90508083825260208201905060208402830185811115610eb957610eb8610e7e565b5b835b81811015610ee25780610ece8882610dac565b845260208401935050602081019050610ebb565b5050509392505050565b600082601f830112610f0157610f00610dc1565b5b8135610f11848260208601610e83565b91505092915050565b60008060408385031215610f3157610f30610d8b565b5b6000610f3f85828601610dac565b925050602083013567ffffffffffffffff811115610f6057610f5f610d90565b5b610f6c85828601610eec565b9150509250929050565b600080fd5b60008083601f840112610f9157610f90610dc1565b5b8235905067ffffffffffffffff811115610fae57610fad610f76565b5b602083019150836001820283011115610fca57610fc9610e7e565b5b9250929050565b60008060208385031215610fe857610fe7610d8b565b5b600083013567ffffffffffffffff81111561100657611005610d90565b5b61101285828601610f7b565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110498261101e565b9050919050565b6110598161103e565b82525050565b60006020820190506110746000830184611050565b92915050565b600080fd5b600067ffffffffffffffff82111561109a57611099610dd7565b5b6110a382610dc6565b9050602081019050919050565b82818337600083830152505050565b60006110d26110cd8461107f565b610e37565b9050828152602081018484840111156110ee576110ed61107a565b5b6110f98482856110b0565b509392505050565b600082601f83011261111657611115610dc1565b5b81356111268482602086016110bf565b91505092915050565b60006020828403121561114557611144610d8b565b5b600082013567ffffffffffffffff81111561116357611162610d90565b5b61116f84828501611101565b91505092915050565b60008115159050919050565b61118d81611178565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111cd5780820151818401526020810190506111b2565b60008484015250505050565b60006111e482611193565b6111ee818561119e565b93506111fe8185602086016111af565b61120781610dc6565b840191505092915050565b60006040820190506112276000830185611184565b818103602083015261123981846111d9565b90509392505050565b60006020828403121561125857611257610d8b565b5b600061126684828501610dac565b91505092915050565b60006040820190506112846000830185611050565b6112916020830184611050565b9392505050565b60006060820190506112ad6000830186610cc5565b6112ba6020830185610cc5565b6112c76040830184610cc5565b949350505050565b6000819050919050565b6112e2816112cf565b82525050565b600067ffffffffffffffff82169050919050565b611305816112e8565b82525050565b600061ffff82169050919050565b6113228161130b565b82525050565b600063ffffffff82169050919050565b61134181611328565b82525050565b600060a08201905061135c60008301886112d9565b61136960208301876112fc565b6113766040830186611319565b6113836060830185611338565b6113906080830184611338565b9695505050505050565b6000815190506113a981610d95565b92915050565b6000602082840312156113c5576113c4610d8b565b5b60006113d38482850161139a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061141682610cbb565b915061142183610cbb565b9250828203905081811115611439576114386113dc565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114a882610cbb565b91506114b383610cbb565b9250826114c3576114c261146e565b5b828206905092915050565b60006114d982610cbb565b91506114e483610cbb565b92508282026114f281610cbb565b91508282048414831517611509576115086113dc565b5b5092915050565b600061151b82610cbb565b915061152683610cbb565b9250826115365761153561146e565b5b828204905092915050565b600081905092915050565b50565b600061155c600083611541565b91506115678261154c565b600082019050919050565b600061157d8261154f565b915081905091905056fea26469706673582212208dd42c443709aac8a10ae7d47e7ac72959b752b12264e49dc506748622fcbd3464736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c8063473f1ddc1161007f57806391ad27b41161005957806391ad27b41461027e578063ce10b1fb146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b8063473f1ddc146101ea5780635f1b0fd8146102155780636e04ff0d14610240576100dd565b80631fe543e3116100bb5780631fe543e3146101635780632cfcc5391461018c578063320229eb146101965780634585e33b146101c1576100dd565b806309bc33a7146100e2578063115cbaf51461010d57806312065fe014610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610cd4565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610d66565b60405180910390f35b34801561014457600080fd5b5061014d61037b565b60405161015a9190610cd4565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610f1a565b610383565b005b610194610443565b005b3480156101a257600080fd5b506101ab6105b2565b6040516101b89190610cd4565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190610fd1565b6105bc565b005b3480156101f657600080fd5b506101ff6107ac565b60405161020c919061105f565b60405180910390f35b34801561022157600080fd5b5061022a6107d6565b6040516102379190610cd4565b60405180910390f35b34801561024c57600080fd5b506102676004803603810190610262919061112f565b6107e3565b604051610275929190611212565b60405180910390f35b34801561028a57600080fd5b50610293610891565b6040516102a09190610cd4565b60405180910390f35b3480156102b557600080fd5b506102be6108b9565b6040516102cb9190610cd4565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190611242565b6108c8565b604051610308919061105f565b60405180910390f35b34801561031d57600080fd5b5061032661090f565b6040516103339190610cd4565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b600047905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042c92919061126f565b60405180910390fd5b61043f828261091b565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561049d576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104b1576104b0610cef565b5b600160149054906101000a900460ff1660018111156104d3576104d2610cef565b5b1461050a576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105d6604051806020016040528060008152506107e3565b509050806106455747600080549050600160149054906101000a900460ff16600181111561060757610606610cef565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161063c93929190611298565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561066a57610669610cef565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610734959493929190611347565b6020604051808303816000875af1158015610753573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077791906113af565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff16600181111561080b5761080a610cef565b5b6000600181111561081f5761081e610cef565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610853919061140b565b11905060006001600080549050119050600080471190508380156108745750825b801561087d5750815b80156108865750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600163ffffffff16905090565b60008082815481106108dd576108dc61143f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109365761093561143f565b5b6020026020010151610948919061149d565b9050600080828154811061095f5761095e61143f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109f3576109f2610cef565b5b0217905550600067ffffffffffffffff811115610a1357610a12610dd7565b5b604051908082528060200260200182016040528015610a415781602001602082028036833780820191505090505b5060009080519060200190610a57929190610c14565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16600a600947610a8791906114ce565b610a919190611510565b604051610a9d90611572565b60006040518083038185875af1925050503d8060008114610ada576040519150601f19603f3d011682016040523d82523d6000602084013e610adf565b606091505b5050905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16600a600147610b2b91906114ce565b610b359190611510565b604051610b4190611572565b60006040518083038185875af1925050503d8060008114610b7e576040519150601f19603f3d011682016040523d82523d6000602084013e610b83565b606091505b50509050811580610b92575080155b15610bc9576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2505050505050565b828054828255906000526020600020908101928215610c8d579160200282015b82811115610c8c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c34565b5b509050610c9a9190610c9e565b5090565b5b80821115610cb7576000816000905550600101610c9f565b5090565b6000819050919050565b610cce81610cbb565b82525050565b6000602082019050610ce96000830184610cc5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d2f57610d2e610cef565b5b50565b6000819050610d4082610d1e565b919050565b6000610d5082610d32565b9050919050565b610d6081610d45565b82525050565b6000602082019050610d7b6000830184610d57565b92915050565b6000604051905090565b600080fd5b600080fd5b610d9e81610cbb565b8114610da957600080fd5b50565b600081359050610dbb81610d95565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e0f82610dc6565b810181811067ffffffffffffffff82111715610e2e57610e2d610dd7565b5b80604052505050565b6000610e41610d81565b9050610e4d8282610e06565b919050565b600067ffffffffffffffff821115610e6d57610e6c610dd7565b5b602082029050602081019050919050565b600080fd5b6000610e96610e9184610e52565b610e37565b90508083825260208201905060208402830185811115610eb957610eb8610e7e565b5b835b81811015610ee25780610ece8882610dac565b845260208401935050602081019050610ebb565b5050509392505050565b600082601f830112610f0157610f00610dc1565b5b8135610f11848260208601610e83565b91505092915050565b60008060408385031215610f3157610f30610d8b565b5b6000610f3f85828601610dac565b925050602083013567ffffffffffffffff811115610f6057610f5f610d90565b5b610f6c85828601610eec565b9150509250929050565b600080fd5b60008083601f840112610f9157610f90610dc1565b5b8235905067ffffffffffffffff811115610fae57610fad610f76565b5b602083019150836001820283011115610fca57610fc9610e7e565b5b9250929050565b60008060208385031215610fe857610fe7610d8b565b5b600083013567ffffffffffffffff81111561100657611005610d90565b5b61101285828601610f7b565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110498261101e565b9050919050565b6110598161103e565b82525050565b60006020820190506110746000830184611050565b92915050565b600080fd5b600067ffffffffffffffff82111561109a57611099610dd7565b5b6110a382610dc6565b9050602081019050919050565b82818337600083830152505050565b60006110d26110cd8461107f565b610e37565b9050828152602081018484840111156110ee576110ed61107a565b5b6110f98482856110b0565b509392505050565b600082601f83011261111657611115610dc1565b5b81356111268482602086016110bf565b91505092915050565b60006020828403121561114557611144610d8b565b5b600082013567ffffffffffffffff81111561116357611162610d90565b5b61116f84828501611101565b91505092915050565b60008115159050919050565b61118d81611178565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111cd5780820151818401526020810190506111b2565b60008484015250505050565b60006111e482611193565b6111ee818561119e565b93506111fe8185602086016111af565b61120781610dc6565b840191505092915050565b60006040820190506112276000830185611184565b818103602083015261123981846111d9565b90509392505050565b60006020828403121561125857611257610d8b565b5b600061126684828501610dac565b91505092915050565b60006040820190506112846000830185611050565b6112916020830184611050565b9392505050565b60006060820190506112ad6000830186610cc5565b6112ba6020830185610cc5565b6112c76040830184610cc5565b949350505050565b6000819050919050565b6112e2816112cf565b82525050565b600067ffffffffffffffff82169050919050565b611305816112e8565b82525050565b600061ffff82169050919050565b6113228161130b565b82525050565b600063ffffffff82169050919050565b61134181611328565b82525050565b600060a08201905061135c60008301886112d9565b61136960208301876112fc565b6113766040830186611319565b6113836060830185611338565b6113906080830184611338565b9695505050505050565b6000815190506113a981610d95565b92915050565b6000602082840312156113c5576113c4610d8b565b5b60006113d38482850161139a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061141682610cbb565b915061142183610cbb565b9250828203905081811115611439576114386113dc565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114a882610cbb565b91506114b383610cbb565b9250826114c3576114c261146e565b5b828206905092915050565b60006114d982610cbb565b91506114e483610cbb565b92508282026114f281610cbb565b91508282048414831517611509576115086113dc565b5b5092915050565b600061151b82610cbb565b915061152683610cbb565b9250826115365761153561146e565b5b828204905092915050565b600081905092915050565b50565b600061155c600083611541565b91506115678261154c565b600082019050919050565b600061157d8261154f565b915081905091905056fea26469706673582212208dd42c443709aac8a10ae7d47e7ac72959b752b12264e49dc506748622fcbd3464736f6c63430008110033",
  "devdoc": {
    "author": "Joel Wright",
    "details": "This implements Chainlink VRF v2 and Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call, they look for `upkeepNeeded` to return true. The following should be true in order to return true: 1. The time interval should have passed 2. The lottery should have at least 2 players, and some ETH 3. The subscription is funded with LINK 4. The lottery should be in an \"open\" state"
      }
    },
    "title": "An Ethereum Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating an untamperable decentralised raffle through a smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 225,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 228,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)203"
      },
      {
        "astId": 230,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)203": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}